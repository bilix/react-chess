{"version":3,"sources":["App.styles.js","Components/Board/Board.styles.js","Game/Moves.js","Pieces/Piece.js","Pieces/Pawn.js","Pieces/Knight.js","Pieces/Rook.js","Pieces/Queen.js","Pieces/King.js","Pieces/Bishop.js","Game/Pieces.js","Game/BoardGenerator.js","Store/Reducers/Board/BoardReducer.js","Components/Board/Square.js","Store/Reducers/Players/PlayersReducer.js","Components/Board/PieceComponent.js","Components/Board/HorizontalBorder.js","Components/Board/Board.js","Store/store.js","Components/Header/Header.styles.js","Components/Header/Header.js","Components/PlayerInfo/PlayerInfo.styles.js","Components/PlayerInfo/PieceIcon.js","Components/PlayerInfo/PlayerInfo.js","Components/Actions/Actions.styles.js","Components/Actions/ResetBoard.js","Components/Actions/Actions.js","App.js","index.js"],"names":["AppContainer","styled","div","GameBoard","StyledSquare","props","selected","killable","available","getAdjacentBorders","adjacent","white","ret","length","border","Border","top","bottom","left","right","StyledPiece","currentPlayer","Directions","upN","position","n","downN","leftN","rightN","upRightN","upLeftN","downLeftN","downRightN","Piece","isFriendly","square","friendlyPieces","find","p","isEnemy","enemyPieces","addMoves","initialPosition","direction","distance","move","getMoveByDirection","isRightColumn","isLeftColumn","notValidMoveByDirection","possibleMoves","push","enemy","eP","getGamePiece","pieceId","name","includes","canKillKing","calculateDiagonalMoves","calculateVerticalHorizontalMoves","addIfNotFriendly","fP","this","color","id","Pawn","calculatePossibleMoves","up1","up2","down1","down2","upLeft","upRight","downLeft","downRight","toLeftAttack","toRightAttack","firstMove","icon","Knight","leftUp","rightUp","leftDown","rightDown","isToTheLeft","isToTheRight","Rook","Queen","King","up","down","Bishop","createPiece","piece","GamePieces","gp","verticalBorder","horizontalBorder","calculateAllPossibleMoves","squares","whitePieces","blackPieces","forEach","sq","getAdjacentMoves","moves","board","addIfNoEnemy","adjacency","adjacentHasEnemy","squareNumber","initialState","data","pieceInstance","generateBoard","selectedPiece","availableMoves","player1KilledPieces","player2KilledPieces","createSlice","reducers","selectSquare","state","action","payload","removeSquareSelection","setMoves","movePiece","destinationSquare","playerPieces","resetBoard","reducer","actions","player","positions","i","boardSelector","React","memo","children","useSelector","dispatch","useDispatch","isAvailableMove","adjacentMoves","isSelected","isKillable","isWhite","startWhite","Math","ceil","getSquareColor","key","onClick","selectPlayer","extraReducers","currentPlayerSelector","players","pieceObject","isCurrentPlayer","movements","TopBorder","map","elem","index","BottomBorder","Board","row","showStart","showEnd","Fragment","renderSquare","store","configureStore","boardReducer","playersReducer","StyledHeader","Header","playerName","InfoContainer","InfoTitle","KilledPiecesContainer","StyledPieceIcon","PieceIcon","PlayerInfo","killedPieces","player1KilledPiecesSelector","player2KilledPiecesSelector","Button","button","ActionsContainer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e267f9ed.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto auto auto;\n    grid-template-rows: 75px auto auto;\n    grid-template-areas: \"....  header  ....\"\n                         \"player1  board  player2\"\n                         \"....  actions  ....\";\n    grid-auto-columns: min-content;\n`;","import styled from 'styled-components';\n\nexport const GameBoard = styled.div`\n    display: grid;\n    grid-template-columns: 20px repeat(8, 65px) 20px;\n    grid-template-rows: 20px repeat(8, 65px) 20px;\n    grid-area: board;\n    justify-self: center;\n    align-self: center;\n`;\n\nexport const StyledSquare = styled.div`\n    font-size: 45px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    user-select: none;\n    position: relative;\n    ${props => {\n        if (props.selected) {\n            return `\n                background-color: rgb(4, 41, 247, 0.7);\n                border: 4px solid rgb(4, 41, 247);\n            `;\n        } else if (props.killable) {\n            return `\n                background-color: rgb(244, 57, 0, 0.7);\n                border: 4px solid rgb(244, 57, 0);\n                cursor: pointer;\n            `;\n        } else if (props.available) {\n            return `\n                background-color: rgb(27, 145, 11, 0.7);\n                border: 4px solid rgb(27, 145, 11);\n                cursor: pointer;\n                ${getAdjacentBorders(props.adjacent)}\n            `;\n        } else if (props.white) {\n            return  `\n                background-color: rgb(223, 203, 167, 1);\n            `;\n        } else {\n            return `\n                background-color: rgb(125, 67, 38, 1)\n            `;\n        }\n\n    }}\n`;\n\nconst getAdjacentBorders = (adjacent) => {\n    let ret = ``;\n    if (!adjacent || adjacent.length === 0) return;\n    for (let border of adjacent) {\n        ret += `\n            border-${border}-width: 2px;\n        `;\n    }\n    return ret;\n}\n\nexport const Border = styled.div`\n    background-color: #491E10;\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    user-select: none;\n    ${props => props.top && `\n        border-bottom: 1px solid #DFCBA7;\n    `}\n    ${props => props.bottom && `\n        border-top: 1px solid #DFCBA7;\n    `}\n    ${props => props.left && `\n        border-right: 1px solid #DFCBA7;\n    `}\n    ${props => props.right && `\n        border-left: 1px solid #DFCBA7;\n    `}\n`;\n\nexport const StyledPiece = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    ${props => {\n        if (props.currentPlayer) {\n            return  `cursor: pointer;`\n        } \n    }}\n    \n`;","import { isRightColumn, isLeftColumn } from \"./BoardGenerator\";\n\nexport const Directions = {\n    UP: 'UP',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n    RIGHT: 'RIGHT',\n    UP_LEFT: 'UP_LEFT',\n    UP_RIGHT: 'UP_RIGHT',\n    DOWN_LEFT: 'DOWN_LEFT',\n    DOWN_RIGHT: 'DOWN_RIGHT',\n}\n\nexport const upN = (position, n) => position - 8*n;\nexport const downN = (position, n) => position + 8*n;\nexport const leftN = (position, n) => position - n;\nexport const rightN = (position, n) => position + n;\nexport const upRightN = (position, n) => position - n*7;\nexport const upLeftN = (position, n) => position - n*9;\nexport const downLeftN = (position, n) => position + n*7;\nexport const downRightN = (position, n) => position + n*9;\n\nexport const getMoveByDirection = direction => {\n    switch (direction) {\n        case Directions.UP:\n            return upN;\n        case Directions.DOWN:\n            return downN;\n        case Directions.LEFT:\n            return leftN;\n        case Directions.RIGHT:\n            return rightN;\n        case Directions.UP_LEFT:\n            return upLeftN;\n        case Directions.UP_RIGHT:\n            return upRightN;\n        case Directions.DOWN_LEFT:\n            return downLeftN;\n        case Directions.DOWN_RIGHT:\n            return downRightN;\n        default:\n            return undefined;\n    }\n}\n\nexport const notValidMoveByDirection = (move, direction) => {\n    switch (direction) {\n        case Directions.UP:\n            return move <= 0;\n        case Directions.DOWN:\n            return move > 64;\n        case Directions.LEFT:\n            return isRightColumn(move);\n        case Directions.RIGHT:\n            return isLeftColumn(move);\n        case Directions.UP_LEFT:\n            return move <= 0 || isRightColumn(move);\n        case Directions.UP_RIGHT:\n            return move <= 0 || isLeftColumn(move);\n        case Directions.DOWN_LEFT:\n            return move > 64 || isRightColumn(move);\n        case Directions.DOWN_RIGHT:\n            return move > 64 || isLeftColumn(move);\n        default:\n            return true;\n    }\n}\n","import { Directions, getMoveByDirection, notValidMoveByDirection } from \"../Game/Moves\";\nimport { getGamePiece } from \"../Game/Pieces\";\n\nclass Piece {\n    constructor(props) {\n        this.color = props.color;\n        this.id = props.id;\n        this.canKillKing = false;\n        this.possibleMoves = [];\n    }\n\n    isFriendly = (square, friendlyPieces) => !!friendlyPieces.find(p => p.position === square);\n    isEnemy = (square, enemyPieces) => !!enemyPieces.find(p => p.position === square);\n\n    addMoves = (initialPosition, direction, distance, friendlyPieces, enemyPieces) => {\n        const move = getMoveByDirection(direction)(initialPosition, distance);\n        if (notValidMoveByDirection(move, direction) || this.isFriendly(move, friendlyPieces)) return;\n        else {\n            this.possibleMoves.push(move);\n            if (!this.isEnemy(move, enemyPieces)) {\n                this.addMoves(initialPosition, direction, distance + 1, friendlyPieces, enemyPieces);\n            } else {\n                const enemy = enemyPieces.find(eP => eP.position === move);\n                const enemyPiece = getGamePiece(enemy.pieceId);\n                if (enemyPiece.name.includes('k')) {\n                    this.canKillKing = true;\n                }\n            }\n        }\n    }\n\n    calculateDiagonalMoves = (position, friendlyPieces, enemyPieces) => {\n        this.addMoves(position, Directions.UP_LEFT, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.UP_RIGHT, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.DOWN_RIGHT, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.DOWN_LEFT, 1, friendlyPieces, enemyPieces);\n    }\n\n    calculateVerticalHorizontalMoves = (position, friendlyPieces, enemyPieces) => {\n        this.addMoves(position, Directions.UP, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.DOWN, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.LEFT, 1, friendlyPieces, enemyPieces);\n        this.addMoves(position, Directions.RIGHT, 1, friendlyPieces, enemyPieces);\n    }\n\n    addIfNotFriendly = (position, friendlyPieces) => {\n        if(!friendlyPieces.find(fP => fP.position === position)) this.possibleMoves.push(position);\n    }\n}\n\nexport default Piece;","import Piece from './Piece';\nimport { isRightColumn, isLeftColumn } from '../Game/BoardGenerator';\nimport { upN, downN, upLeftN, upRightN, downLeftN, downRightN } from '../Game/Moves';\n\nclass Pawn extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = this.color === 'w' ? '♙' : '♟';\n        this.name = `${this.color}p`;\n    }\n\n    calculatePossibleMoves = (position, friendlyPieces, enemyPieces) => {\n        this.possibleMoves = [];\n        const isEnemy = (square) => !!enemyPieces.find(eP => eP.position === square);\n\n        const up1 = upN(position, 1);\n        const up2 = upN(position, 2);\n        const down1 = downN(position, 1);\n        const down2 = downN(position, 2);\n        const upLeft = upLeftN(position, 1);\n        const upRight = upRightN(position, 1);\n        const downLeft = downLeftN(position, 1);\n        const downRight = downRightN(position, 1);\n\n        const toLeftAttack = isLeftColumn(position) ? 0 : position;\n        const toRightAttack = isRightColumn(position) ? 0 : position;\n\n        const firstMove = this.color === 'w' ? position >= 49 : position <= 16;\n        if (this.color === 'w') {\n            if (!isEnemy(up1))\n                this.addIfNotFriendly(up1, friendlyPieces);\n            if (firstMove && !(isEnemy(up1) || isEnemy(up2)))\n                this.addIfNotFriendly(up2, friendlyPieces);\n            if ((toLeftAttack && isEnemy(upLeft)))\n                this.possibleMoves.push(upLeft);\n            if (toRightAttack && isEnemy(upRight))\n                this.possibleMoves.push(upRight);\n        } else {\n            if (!isEnemy(down1))\n                this.addIfNotFriendly(down1, friendlyPieces);\n            if (firstMove && !(isEnemy(down1) || isEnemy(down2)))\n                this.addIfNotFriendly(down2, friendlyPieces);\n            if (toLeftAttack && isEnemy(downLeft))\n                this.possibleMoves.push(downLeft);\n            if (toRightAttack && isEnemy(downRight))\n                this.possibleMoves.push(downRight);\n        }\n        return this.possibleMoves;\n    }\n}\n\nexport default Pawn;","import Piece from './Piece';\nimport { isRightColumn, isLeftColumn } from '../Game/BoardGenerator';\n\nclass Knight extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = props.color === 'w' ? '♘' : '♞';\n        this.name = `${this.color}h`;\n    }\n\n    calculatePossibleMoves = (position, friendlyPieces) => {\n        this.possibleMoves = [];\n        const upLeft = position - 17;\n        const upRight = position - 15;\n        const leftUp = position - 10;\n        const rightUp = position - 6;\n        const downLeft = position + 15;\n        const downRight = position + 17;\n        const leftDown = position + 6;\n        const rightDown = position + 10;\n\n        const isToTheLeft = (position) => isLeftColumn(position) || position % 8 === 2;\n        const isToTheRight = (position) => isRightColumn(position) || position % 8 === 7; \n\n        if (upLeft > 0 && !isRightColumn(upLeft)) \n            this.addIfNotFriendly(upLeft, friendlyPieces);\n        if (upRight > 0 && !isLeftColumn(upRight)) \n            this.addIfNotFriendly(upRight, friendlyPieces);\n        if (leftUp > 0 && !isToTheRight(leftUp)) \n            this.addIfNotFriendly(leftUp, friendlyPieces);\n        if (rightUp > 0 && !isToTheLeft(rightUp)) \n            this.addIfNotFriendly(rightUp, friendlyPieces);\n        if (downLeft <= 64 && !isRightColumn(downLeft)) \n            this.addIfNotFriendly(downLeft, friendlyPieces);\n        if (downRight <= 64 && !isLeftColumn(downRight)) \n            this.addIfNotFriendly(downRight, friendlyPieces);\n        if (leftDown <= 64 && !isToTheRight(leftDown)) \n            this.addIfNotFriendly(leftDown, friendlyPieces);\n        if (rightDown <= 64 && !isToTheLeft(rightDown)) \n            this.addIfNotFriendly(rightDown, friendlyPieces);\n\n        return this.possibleMoves;\n    }\n}\n\nexport default Knight;","import Piece from './Piece';\n\nclass Rook extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = props.color === 'w' ? '♖' : '♜';\n        this.name = `${this.color}r`;\n    }\n\n    calculatePossibleMoves = (position, friendlyPieces, enemyPieces) => {\n        this.possibleMoves = [];\n        this.calculateVerticalHorizontalMoves(position, friendlyPieces, enemyPieces);\n        return this.possibleMoves;\n    }\n}\n\nexport default Rook;","import Piece from './Piece';\n\nclass Queen extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = props.color === 'w' ? '♕' : '♛';\n        this.name = `${this.color}q`;\n    }\n\n    calculatePossibleMoves = (position, friendlyPieces, enemyPieces) => {\n        this.possibleMoves = [];\n        this.calculateVerticalHorizontalMoves(position, friendlyPieces, enemyPieces);\n        this.calculateDiagonalMoves(position, friendlyPieces, enemyPieces);\n        return this.possibleMoves;\n    }\n\n}\n\nexport default Queen;","import Piece from './Piece';\nimport { isLeftColumn, isRightColumn } from '../Game/BoardGenerator';\nimport { upN, downN, leftN, rightN, upLeftN, upRightN, downLeftN, downRightN } from '../Game/Moves';\n\nclass King extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = props.color === 'w' ? '♔' : '♚';\n        this.name = `${this.color}k`;\n    }\n    calculatePossibleMoves = (position, friendlyPieces) => {\n        this.possibleMoves = [];\n\n        const up = upN(position, 1);\n        const down = downN(position, 1);\n        const left = leftN(position, 1);\n        const right = rightN(position, 1);\n        const upLeft = upLeftN(position, 1);\n        const upRight = upRightN(position, 1);\n        const downLeft = downLeftN(position , 1);\n        const downRight = downRightN(position, 1);\n\n    \n        if (up > 0)\n            this.addIfNotFriendly(up, friendlyPieces);\n        if (down <= 64)\n            this.addIfNotFriendly(down, friendlyPieces);\n        if (!isRightColumn(left))\n            this.addIfNotFriendly(left, friendlyPieces);\n        if (!isLeftColumn(right))\n            this.addIfNotFriendly(right, friendlyPieces);\n        if (upLeft > 0 && !isRightColumn(upLeft))\n            this.addIfNotFriendly(upLeft, friendlyPieces);\n        if (upRight > 0 && !isLeftColumn(upRight))\n            this.addIfNotFriendly(upRight, friendlyPieces);\n        if (downLeft <= 64 && !isRightColumn(downLeft))\n            this.addIfNotFriendly(downLeft, friendlyPieces);\n        if (downRight <= 64 && !isLeftColumn(downRight)) \n            this.addIfNotFriendly(downRight, friendlyPieces);\n    \n        return this.possibleMoves;\n    }\n}\n\nexport default King;","import Piece from './Piece';\n\nclass Bishop extends Piece {\n    constructor(props) {\n        super(props);\n        this.icon = props.color === 'w' ? '♗' : '♝';\n        this.name = `${this.color}b`;\n    }\n\n    calculatePossibleMoves = (position, friendlyPieces, enemyPieces) => {\n        this.possibleMoves = [];\n        this.calculateDiagonalMoves(position, friendlyPieces, enemyPieces);\n        return this.possibleMoves;\n    }\n}\n\nexport default Bishop;","import Pawn from '../Pieces/Pawn';\nimport Knight from '../Pieces/Knight';\nimport Rook from '../Pieces/Rook';\nimport Queen from '../Pieces/Queen';\nimport King from '../Pieces/King';\nimport Bishop from '../Pieces/Bishop';\n\nexport const createPiece = (piece, color, id) => {\n    switch (piece) {\n        case 'p':\n            return new Pawn({color, id});\n        case 'r':\n            return new Rook({color, id});\n        case 'h':\n            return new Knight({color, id});\n        case 'q':\n            return new Queen({color, id});\n        case 'k':\n            return new King({color, id});\n        case 'b':\n            return new Bishop({color, id});\n        default:\n            return null;\n    }\n}\n\nexport const getGamePiece = id => GamePieces.find(gp => gp.id === id);\n\nexport const GamePieces = [];","import { createPiece, GamePieces, getGamePiece } from './Pieces';\n\nexport const initialBoard = [\n    'br','bh','bb','bq','bk','bb','bh','br',\n    'bp','bp','bp','bp','bp','bp','bp','bp',\n    '','','','','','','','',\n    '','','','','','','','',\n    '','','','','','','','',\n    '','','','','','','','',\n    'wp','wp','wp','wp','wp','wp','wp','wp',\n    'wr','wh','wb','wq','wk','wb','wh','wr'\n];\n\nexport const verticalBorder = [8,7,6,5,4,3,2,1];\nexport const horizontalBorder = ['', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ''];\n\nexport const generateBoard = (board) => {\n    let squares = [];\n    let whitePieces = [];\n    let blackPieces = [];\n    let squareNumber = 1;\n    let pieceId = 1;\n    for (let data of board) {\n        if (!data) {\n            squares.push({\n                id: squareNumber++,\n                pieceId: null,\n            })\n        } else {\n            const color = data[0];\n            const piece = data[1];\n            const pieceInstance = createPiece(piece, color, pieceId++);\n            squares.push({\n                pieceId: pieceInstance.id,\n                id: squareNumber,\n            });\n            if (color === 'w') {\n                whitePieces.push({\n                    position: squareNumber,\n                    pieceId: pieceInstance.id,\n                })\n            } else {\n                blackPieces.push({\n                    position: squareNumber,\n                    pieceId: pieceInstance.id,\n                })\n            }\n            squareNumber++;\n            GamePieces.push(pieceInstance);\n        }\n    }\n    calculateAllPossibleMoves(squares, whitePieces, blackPieces);\n    return squares;\n}\n\nexport const calculateAllPossibleMoves = (squares, whitePieces, blackPieces) => {\n    squares.forEach(sq => {\n        if (sq.pieceId) {\n            const piece = getGamePiece(sq.pieceId);\n            const friendlyPieces = piece.color === 'w' ? whitePieces : blackPieces;\n            const enemyPieces = piece.color === 'w' ? blackPieces : whitePieces;\n            piece.calculatePossibleMoves(sq.id, friendlyPieces, enemyPieces);\n        }\n    })\n}\n\nexport const getSquareColor = (squareNumber) => {\n    let row = Math.ceil(squareNumber/8);\n    let startWhite = row % 2 === 1;\n    return (startWhite && ((squareNumber % 8) % 2) === 1) || (!startWhite && ((squareNumber % 8) % 2) === 0);\n}\n\nexport const getAdjacentMoves = (square, moves, board) => {\n    let adjacent = [];\n    const left = square - 1;\n    const right = square + 1;\n    const top = square - 8;\n    const bottom = square + 8;\n\n    const adjacentHasEnemy = (position) => {\n        return !!board[position - 1].pieceId;\n    };\n    const addIfNoEnemy = (position, adjacency) => !adjacentHasEnemy(position) && adjacent.push(adjacency);\n    \n    if (moves.includes(left) && !isRightColumn(left)) addIfNoEnemy(left, 'left');\n    if (moves.includes(right) && !isLeftColumn(right)) addIfNoEnemy(right, 'right');\n    if (moves.includes(top) && top > 0) addIfNoEnemy(top, 'top');\n    if (moves.includes(bottom) && bottom < 64) addIfNoEnemy(bottom, 'bottom');\n\n    return adjacent;\n}\n\nexport const getColorFromPlayer = (player) => player === 1 ? 'w' : 'b';\nexport const getPlayerFromColor = (color) => color === 'w' ? 1 : 2;\n\nexport const isRightColumn = (squareNumber) => squareNumber % 8 === 0;\nexport const isLeftColumn = (squareNumber) => squareNumber % 8 === 1;\n\n","import {createSlice} from '@reduxjs/toolkit';\nimport { initialBoard, generateBoard, calculateAllPossibleMoves } from '../../../Game/BoardGenerator';\nimport { getGamePiece } from '../../../Game/Pieces';\n\nconst initialState = {\n    board: generateBoard(initialBoard),\n    selectedPiece: {\n        square: 0,\n        pieceId: null,\n    },\n    availableMoves: [],\n    player1KilledPieces: [],\n    player2KilledPieces: [],\n};\n\nconst {reducer, actions} = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        selectSquare(state, action) {\n            state.selectedPiece = action.payload;\n        },\n        removeSquareSelection(state) {\n            state.selectedPiece = {\n                square: 0,\n                pieceId: null,\n            };\n        },\n        setMoves(state, action) {\n            state.availableMoves = action.payload;\n        },\n        movePiece(state, action) {\n            const destinationSquare = state.board[action.payload - 1];\n            if (destinationSquare.pieceId) {\n                const destinationPiece = getGamePiece(destinationSquare.pieceId);\n                const color = destinationPiece.color;\n                if (color === 'w') state.player1KilledPieces.push(destinationSquare.pieceId);\n                else state.player2KilledPieces.push(destinationSquare.pieceId);\n            }\n\n            state.board[state.selectedPiece.square - 1].pieceId = null;\n            state.board[action.payload - 1].pieceId = state.selectedPiece.pieceId;\n            state.selectedPiece = {\n                square: 0,\n                pieceId: null,\n            };\n            state.availableMoves = [];\n            calculateAllPossibleMoves(state.board, playerPieces(1, state.board), playerPieces(2, state.board));\n        },\n        resetBoard: () => initialState,\n    }\n});\n\nconst playerPieces = (player, board) => {\n    let positions = [];\n    const color = player === 1 ? 'w' : 'b';\n    for (let i = 0; i < board.length; i++) {\n        if (board[i].pieceId) {\n            const piece = getGamePiece(board[i].pieceId);\n            if(piece.color === color) positions.push({\n                position: i+1, \n                pieceId: piece.id,\n            });\n        }\n    }\n    return positions;\n}\n\nexport const boardSelector = (state) => state.board;\nexport const player1KilledPiecesSelector = (state) => state.board.player1KilledPieces;\nexport const player2KilledPiecesSelector = (state) => state.board.player2KilledPieces;\n\nexport const {selectSquare, removeSquareSelection, setMoves, movePiece, resetBoard} = actions;\n\nexport default reducer;","import React from 'react';\nimport { StyledSquare } from './Board.styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { movePiece, boardSelector } from '../../Store/Reducers/Board/BoardReducer';\nimport { getSquareColor, getAdjacentMoves } from '../../Game/BoardGenerator';\n\nconst Square = ({squareNumber, children}) => {\n    const board = useSelector(state => boardSelector(state));\n    const dispatch = useDispatch();\n\n    const isAvailableMove = board.availableMoves.includes(squareNumber);\n    if (isAvailableMove) {\n        //TODO: look for better solution to fix double borders\n        var adjacentMoves = getAdjacentMoves(squareNumber, board.availableMoves, board.board);\n    }\n\n    const isSelected = squareNumber === board.selectedPiece.square;\n    const isKillable = isAvailableMove && children !== null;\n    const isWhite = getSquareColor(squareNumber);\n\n    const handleClick = () => {\n        if (isAvailableMove) {\n            dispatch(movePiece(squareNumber));\n        }\n    }\n    return (\n        <StyledSquare \n            key={`square_${squareNumber}`} \n            adjacent={adjacentMoves} \n            onClick={() => handleClick()} \n            killable={isKillable} \n            available={isAvailableMove} \n            selected={isSelected} \n            white={isWhite}>\n                {children}\n        </StyledSquare>\n    )\n};\n\nexport default React.memo(Square);","import {createSlice} from '@reduxjs/toolkit';\nimport {movePiece, resetBoard} from '../Board/BoardReducer';\n\nconst {reducer, actions} = createSlice({\n    name: 'players',\n    initialState: {\n        currentPlayer: 1,\n    },\n    reducers: {\n        selectPlayer(state, action) {\n            state.currentPlayer = action.payload;\n        },\n    },\n    extraReducers: {\n        [movePiece]: (state) => {\n          state.currentPlayer = state.currentPlayer === 1 ? 2 : 1;\n        },\n        [resetBoard]: (state) => {\n            state.currentPlayer = 1;\n        }\n      }\n});\n\nexport const currentPlayerSelector = (state) => state.players.currentPlayer;\n\nexport const {selectPlayer} = actions;\n\nexport default reducer;","import React from 'react';\nimport { StyledPiece } from './Board.styles';\nimport { selectSquare, setMoves } from '../../Store/Reducers/Board/BoardReducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { currentPlayerSelector } from '../../Store/Reducers/Players/PlayersReducer';\nimport { getPlayerFromColor } from '../../Game/BoardGenerator';\nimport { getGamePiece } from '../../Game/Pieces';\n\nconst PieceComponent = ({pieceId, position}) =>{\n    const currentPlayer = useSelector(state => currentPlayerSelector(state));\n    const dispatch = useDispatch();\n\n    const pieceObject = getGamePiece(pieceId);\n    \n    const player = getPlayerFromColor(pieceObject.color);\n\n    const isCurrentPlayer = player === currentPlayer;\n\n\n    const handleClick = () => {\n        if (!isCurrentPlayer) return null;\n        dispatch(selectSquare({\n            square: position,\n            pieceId,\n        }));\n        const movements = pieceObject.possibleMoves;\n        dispatch(setMoves(movements));\n    }\n\n    return (\n        <StyledPiece currentPlayer={isCurrentPlayer} onClick={handleClick}>\n            {pieceObject.icon}\n        </StyledPiece>\n    )\n};\n\nexport default React.memo(PieceComponent);","import React from 'react';\nimport { horizontalBorder } from '../../Game/BoardGenerator';\nimport { Border } from './Board.styles';\n\nexport const TopBorder = () => {\n    return (\n        horizontalBorder.map((elem, index) => (\n            <Border key={`border_top_${index}`} top={!!elem}>{elem}</Border>)\n        )\n    )\n    \n};\n\nexport const BottomBorder = () => {\n    return (\n        horizontalBorder.map((elem, index) => (\n            <Border key={`border_bottom_${index}`} bottom={!!elem}>{elem}</Border>)\n        )\n    )\n};","import React from 'react';\nimport { GameBoard, Border } from './Board.styles';\nimport Square from './Square';\nimport { verticalBorder, isLeftColumn, isRightColumn } from '../../Game/BoardGenerator';\nimport PieceComponent from './PieceComponent';\nimport {useSelector} from 'react-redux';\nimport { boardSelector } from '../../Store/Reducers/Board/BoardReducer';\nimport { TopBorder, BottomBorder} from './HorizontalBorder';\n\nconst renderSquare = (square) => {\n    const row = Math.ceil(square.id/8);\n    const showStart = isLeftColumn(square.id);\n    const showEnd = isRightColumn(square.id);\n    return (\n        <React.Fragment key={`square_container_${square.id}`}>\n            {showStart && <Border key={`border_left_${verticalBorder[row-1]}`} left>{verticalBorder[row-1]}</Border>}\n            <Square squareNumber={square.id}>\n                {square.pieceId && \n                    <PieceComponent position={square.id} pieceId={square.pieceId} />\n                }\n            </Square>\n            {showEnd && <Border key={`border_right_${verticalBorder[row-1]}`} right>{verticalBorder[row-1]}</Border>}\n        </React.Fragment>\n    )\n}\n\nconst Board = () => {\n    const board = useSelector(state => boardSelector(state)).board;\n    \n    return (\n        <GameBoard>\n            <TopBorder />\n            {board.map(square => renderSquare(square))}\n            <BottomBorder />\n        </GameBoard>\n    )\n};\n\nexport default Board;","import {configureStore} from '@reduxjs/toolkit';\nimport boardReducer from './Reducers/Board/BoardReducer';\nimport playersReducer from './Reducers/Players/PlayersReducer';\n\nconst store = configureStore({\n    reducer: {\n        board: boardReducer,\n        players: playersReducer,\n    }\n});\n\nexport default store;","import styled from 'styled-components';\n\nexport const StyledHeader = styled.div`\n    grid-area: header;\n    align-self: center;\n    justify-self: center;\n    font-weight: bold;\n    font-size: 25px;\n`;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { currentPlayerSelector } from '../../Store/Reducers/Players/PlayersReducer';\nimport { StyledHeader } from './Header.styles';\n\nconst Header = () => {\n    const currentPlayer = useSelector(state => currentPlayerSelector(state));\n    const playerName = currentPlayer === 1 ? 'White' : 'Black';\n    \n    return (\n        <StyledHeader>\n            {`Current player: ${playerName}`}\n        </StyledHeader>\n    )\n}\n\nexport default Header;","import styled from 'styled-components';\n\nexport const InfoContainer = styled.div`\n    ${props =>{\n        if(props.player === 1) {\n            return `\n                grid-area: player1;\n            `;\n        } else {\n            return `\n                grid-area: player2;\n            `;\n        }\n    }}\n    justify-self: center;\n    padding: 50px 15px;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n`;\n\nexport const InfoTitle = styled.div`\n    font-weight: bold;\n    font-size: 20px;\n    align-text: center;\n`;\n\nexport const KilledPiecesContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    padding: 40px 0;\n    min-width: 200px;\n`;\n\nexport const StyledPieceIcon = styled.div`\n    font-size: 45px;\n`;","import React from 'react';\nimport { getGamePiece } from '../../Game/Pieces';\nimport { StyledPieceIcon } from './PlayerInfo.styles';\n\nconst PieceIcon = ({player, pieceId}) => {\n    const color = player === 1 ? 'w' : 'b';\n    const pieceObject = getGamePiece(pieceId, color);\n\n    return (\n        <StyledPieceIcon>\n            {pieceObject.icon}\n        </StyledPieceIcon>\n    )\n}\n\nexport default PieceIcon;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { player1KilledPiecesSelector, player2KilledPiecesSelector } from '../../Store/Reducers/Board/BoardReducer';\nimport { InfoContainer, InfoTitle, KilledPiecesContainer } from './PlayerInfo.styles';\nimport PieceIcon from './PieceIcon';\n\nconst PlayerInfo = ({player}) => {\n    const killedPieces = useSelector(state => player === 1 ? player1KilledPiecesSelector(state)\n                                        : player2KilledPiecesSelector(state))\n\n    return (\n        <InfoContainer player={player}>\n            <InfoTitle>Player {player}</InfoTitle>\n            <KilledPiecesContainer>\n                {killedPieces.map((pieceId, index) => <PieceIcon key={`dead_piece_${player}_${index}`} pieceId={pieceId} player={player} />)}\n            </KilledPiecesContainer>\n        </InfoContainer>\n    )\n}\n\nexport default PlayerInfo;","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    padding: 10px 20px;\n    color: white;\n    background-color: rgb(12, 138, 242);\n    border-radius: 5px;\n    cursor: pointer;\n    border: 0;\n    font-size: 20px;\n`;\n\nexport const ActionsContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    grid-area: actions;\n    height: 75px;\n`;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { resetBoard } from '../../Store/Reducers/Board/BoardReducer';\nimport { Button } from './Actions.styles';\n\nconst ResetBoard = () => {\n    const dispatch = useDispatch();\n    const handleClick = () => {\n        dispatch(resetBoard());\n    }\n    return (\n        <Button onClick={() => handleClick()}>\n            Reset Board\n        </Button>\n    )\n}\n\nexport default React.memo(ResetBoard);","import React from 'react';\nimport ResetBoard from './ResetBoard';\nimport { ActionsContainer } from './Actions.styles';\n\nconst Actions = () => (\n    <ActionsContainer>\n        <ResetBoard />\n    </ActionsContainer>\n);\n\nexport default React.memo(Actions);","import React from 'react';\nimport {AppContainer} from './App.styles';\nimport './App.css';\nimport Board from './Components/Board/Board';\nimport { Provider } from \"react-redux\";\nimport store from './Store/store';\nimport Header from './Components/Header/Header';\nimport PlayerInfo from './Components/PlayerInfo/PlayerInfo';\nimport Actions from './Components/Actions/Actions';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AppContainer>\n        <Header />\n        <PlayerInfo player={1} />\n        <Board />\n        <PlayerInfo player={2} />\n        <Actions />\n      </AppContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}